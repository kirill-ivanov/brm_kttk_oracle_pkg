CREATE OR REPLACE PACKAGE PK208_PINDB_IMPORT
IS
    --
    -- Пакет для создания клиентов бренда xTTK «Санкт-Петербургский ТЕЛЕПОРТ»
    --
    -- ==============================================================================
    c_PkgName   constant varchar2(30) := 'PK208_PINDB_IMPORT';
    -- ==============================================================================
    c_RET_OK    constant integer := 0;
    c_RET_ER		constant integer :=-1;
    
    type t_refc is ref cursor;
    -- ID КТТК
    c_CONTRACTOR_KTTK_ID     CONSTANT INTEGER := 1;
    -- Поставщик для 'СПб филиал ТТК' 
    c_CONTRACTOR_SPB_XTTK_ID CONSTANT INTEGER := 8;
    -- Услуги присоединения и пропуска трафика на местном и/или зоновом уровне
    c_SERVICE_OPLOCL         CONSTANT INTEGER := 7;
    
    
    -- ----------------------------------------------------------------------------- --
    -- Экскорт данных из старого биллинга по бренду '.SPB TTK Brand'
    -- и услуге местного и зонового присоединения
    --
    PROCEDURE Import_data;
    
    -- Загрузка информации о менеджерах
    PROCEDURE Load_managers;
    
    -- Загрузка информации о клиентах
    PROCEDURE Load_clients;
    
    -- Загрузка информации о компаниях - покупателях
    PROCEDURE Load_customers;
    
    -- Загрузка информации о договорах
    PROCEDURE Load_contracts;
    
    -- Загрузка информации о лицевых счетах клиентов
    PROCEDURE Load_accounts;
    
    -- Загрузка информации о заказах
    PROCEDURE Load_orders;
    

    -- Загрузка информации об абонплатах и доплатах до минимального трафика 
    PROCEDURE Load_fixrates;
    
    /*
    -- ----------------------------------------------------------------------------- --
    -- Загрузка данных в биллинг
    --
    PROCEDURE Load_customers;
    
    -- ============================================================================== --
    -- Удалить клиента (все что создано процедурой New_client)
    -- ============================================================================== --
    PROCEDURE Remove_client(
                      p_account_id IN INTEGER
                   );
    */
    
END PK208_PINDB_IMPORT;
/
CREATE OR REPLACE PACKAGE BODY PK208_PINDB_IMPORT
IS

--============================================================================================
-- Экскорт данных из старого биллинга по бренду '.SPB TTK Brand'
-- и услуге местного и зонового присоединения
--
PROCEDURE Import_data
IS
    v_prcName        CONSTANT VARCHAR2(30) := 'Import_data';
    v_count          INTEGER := 0;
BEGIN
    -- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    -- импортируем лицевые счета
    -- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    EXECUTE IMMEDIATE 'TRUNCATE TABLE PINDB_ALL_CONTRACTS_T DROP STORAGE';
    --
    -- account_no - номер договора,
    -- custno - номер л/с
    -- остальное - интуитивно. если что, спрашивай.
    --
    INSERT INTO PINDB_ALL_CONTRACTS_T(
        ACCOUNT_ID, ACCOUNT_NO, CUSTNO, 
        CLIENT_ID, KONTRAGENT, CLIENT, CUST_TYPE, CUSTDATE, 
        JUR_ZIP, JUR_CITY, JUR_ADDRESS, 
        PHIS_ZIP, PHIS_CITY, PHIS_ADDRESS, PHONE, FAX, EMAIL_ADDR, PHIS_NAME, 
        INN, OKONH, OKPO, BANK, SETTLEMENT, CORR, BIC, KPP, 
        COMPANY, CURRENCY, CURRENCY_SECONDARY, ORIGINAL, TAX_VAT, TAX_SALES, 
        SALES_NAME, DIRECTORATE, MARKET_SEG, BILLING_CURATOR, 
        GL_SEGMENT, IACCOUNT, AGENT_CODE, AGENT_NAME, PPTS_FLAG, DELIVERY
    )
    select * 
    from PIN.V_ALL_CONTRACTS@PINDB c 
    where exists (
        select null 
          from voice_t@PINDB v inner join service_t@PINDB s on V.OBJ_ID0 = S.POID_ID0 
         where V.SUBSERVICE_ID in (37,52) and S.ACCOUNT_OBJ_ID0 = C.ACCOUNT_ID)
           and not exists (
              select null 
                from voice_t@PINDB v inner join service_t@PINDB s on V.OBJ_ID0 = S.POID_ID0 
               where V.SUBSERVICE_ID not in (37,52) and S.ACCOUNT_OBJ_ID0 = C.ACCOUNT_ID)
    ;
    v_count := SQL%ROWCOUNT;
    Pk01_Syslog.Write_msg('PINDB_ALL_CONTRACTS_T: '||v_count||' rows inserted', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );
    Gather_Table_Stat(l_Tab_Name => 'PINDB_ALL_CONTRACTS_T');

    -- добавляем идентификаторы агентов
    MERGE INTO PINDB_ALL_CONTRACTS_T PC
    USING (
        WITH XTTK AS (
            SELECT AGENT_CODE, AGENT_NAME, COUNT(*) FROM PINDB_ALL_CONTRACTS_T    -- 23
            GROUP BY AGENT_CODE, AGENT_NAME
        ), CTR AS (
            SELECT CONTRACTOR, SHORT_NAME, CONTRACTOR_ID, CONTRACTOR_TYPE FROM CONTRACTOR_T
        )
        SELECT AGENT_NAME, AGENT_CODE, CONTRACTOR_ID 
          FROM XTTK, CTR
         WHERE XTTK.AGENT_NAME = CTR.CONTRACTOR
          AND CTR.CONTRACTOR_TYPE = 'XTTK' 
          AND XTTK.AGENT_NAME NOT IN ('СПБ Телепорт','ТТК','УМС','Урал')
        ORDER BY AGENT_NAME
    ) CT
    ON (PC.AGENT_NAME = CT.AGENT_NAME)
    WHEN MATCHED THEN UPDATE SET PC.CONTRACTOR_ID = CT.CONTRACTOR_ID;
    --
    --'DT295'    'СПБ Телепорт'    1478    1422278
    --'DT179'    'ТТК'             5       1448396
    --'DT000168' 'УМС'             1       1451288
    --'102'      'Урал'            3       20
    --
    UPDATE PINDB_ALL_CONTRACTS_T PC SET CONTRACTOR_ID = 1422278
     WHERE PC.AGENT_NAME = 'СПБ Телепорт';
     
    UPDATE PINDB_ALL_CONTRACTS_T PC SET CONTRACTOR_ID = 1448396
     WHERE PC.AGENT_NAME = 'ТТК';

    UPDATE PINDB_ALL_CONTRACTS_T PC SET CONTRACTOR_ID = 1451288
     WHERE PC.AGENT_NAME = 'УМС';
    
    UPDATE PINDB_ALL_CONTRACTS_T PC SET CONTRACTOR_ID = 20 
     WHERE PC.AGENT_NAME = 'Урал';

    UPDATE PINDB_ALL_CONTRACTS_T PC SET CONTRACTOR_ID = 11 
     WHERE PC.AGENT_NAME = 'К-ТТК';
      
    -- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    -- импортируем заказы
    -- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    --
    EXECUTE IMMEDIATE 'TRUNCATE TABLE PINDB_ORDERS_T DROP STORAGE';
    --
    -- заказы по импортированным выше договорам можно взять из
    -- связав по account_obj_id0,
    --
    INSERT INTO PINDB_ORDERS_T (
           POID_ID0, ACCOUNT_OBJ_ID0, ORDER_NO, ORDER_DATE, AGENT_CODE, REGION, 
           AGENT_NAME, SERVICE, PRODUCT, SERV_CODE, REC_ID, PROD_CODE, FREE_DOWNTIME, 
           MINIMAL_MONTHLY_FEE, BILL_START_T, BILL_END_T
    )
    SELECT  s.poid_id0,
            s.account_obj_id0,
            s.login order_no,
            round(utils.infranet2date@PINDB (v.order_date)) order_date,
            ag1.agent_code,
            r1.name region,
            ag1.agent_name,
            subs.name service,
            pr.name product,
            subs.serv_code,
            subs.rec_id,
            pr.prod_code,
            v.free_downtime,
            max(AP.CYCLE_FEE_AMT) minimal_monthly_fee,
            i2d@PINDB(min(AP.CYCLE_START_T)) bill_start_t,
            i2d@PINDB(max(AP.CYCLE_END_T)) bill_end_t
      FROM  service_t@PINDB s,
            voice_t@PINDB v,
            regions_t@PINDB r1,
            agents_t@PINDB ag1,
            subservices_t@PINDB subs,
            products_t@PINDB pr,
            account_products_t@PINDB ap,
            product_t@PINDB p
      WHERE s.poid_id0 = v.obj_id0
        AND v.cpoint_s = r1.rec_id(+)
        AND r1.agent_id = ag1.rec_id(+)
        AND v.subservice_id = subs.rec_id(+)
        AND subs.product_id = pr.rec_id(+)
        AND s.poid_id0 = ap.service_obj_id0
        AND ap.product_obj_id0 = p.poid_id0
      GROUP BY s.poid_id0,
            s.account_obj_id0,
            s.login,
            round(utils.infranet2date@PINDB (v.order_date)),
            ag1.agent_code,
            r1.name,
            ag1.agent_name,
            subs.name,
            pr.name,
            subs.serv_code,
            subs.rec_id,
            pr.prod_code,
            v.free_downtime
    ;
    v_count := SQL%ROWCOUNT;
    Pk01_Syslog.Write_msg('PINDB_ORDERS_T: '||v_count||' rows inserted', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );
    Gather_Table_Stat(l_Tab_Name => 'PINDB_ORDERS_T');
    
    -- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    -- импортируем фиксированные платежи (абонки, минималки)  
    -- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    -- сумму минималки смотрим там, где product_plan like '%minimal%'
    -- абонку - только в строках, где product_plan in ('Voice in Roubles','Voice')
    --
    EXECUTE IMMEDIATE 'TRUNCATE TABLE PINDB_FIXRATES_T DROP STORAGE';
    --
    INSERT INTO PINDB_FIXRATES_T (
      ACCOUNT_POID,CUSTNO,SERVICE_POID,ORDER_NO,
      STATUS,RATE_PLAN,PRODUCT_PLAN,
      CYCLE_FEE_AMT,CURRENCY,CYCLE_START_T,CYCLE_END_T,
      CURRENT_BILLING_START_T,CURRENT_BILLING_END_T
    )
    select a.poid_id0 account_poid, a.account_no custno, 
           s.poid_id0 service_poid, s.login order_no, ap.status, 
           p.name rate_plan, PR.NAME product_plan,
           ap.cycle_fee_amt, A.CURRENCY, 
           i2d@PINDB(ap.cycle_start_t) cycle_start_t, 
           i2d@PINDB(ap.cycle_end_t) cycle_end_t,
           i2d@PINDB(ap.smc_start_t) current_billing_start_t, 
           i2d@PINDB(ap.smc_end_t) current_billing_end_t
    from account_t@PINDB a inner join account_products_t@PINDB ap on a.poid_id0 = ap.obj_id0
         inner join plan_t@PINDB p on ap.plan_obj_id0 = p.poid_id0
         inner join PIN.PLAN_SERVICES_T@PINDB pd on P.POID_ID0 = PD.OBJ_ID0
         inner join PIN.DEAL_PRODUCTS_T@PINDB dp on PD.DEAL_OBJ_ID0 = DP.OBJ_ID0
         inner join PIN.PRODUCT_T@PINDB pr on DP.PRODUCT_OBJ_ID0 = PR.POID_ID0
         inner join service_t@PINDB s on ap.service_obj_id0 = s.poid_id0
    where exists (
          select null from voice_t@PINDB v 
           where V.SUBSERVICE_ID in (37,52) 
             and V.OBJ_ID0 = S.POID_ID0
          )
    ;
    v_count := SQL%ROWCOUNT;
    Pk01_Syslog.Write_msg('PINDB_ORDERS_T: '||v_count||' rows inserted', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );
    Gather_Table_Stat(l_Tab_Name => 'PINDB_ORDERS_T');

    Pk01_Syslog.Write_msg('Stop', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );
    
EXCEPTION
    WHEN OTHERS THEN
        Pk01_Syslog.raise_Exception('ERROR', c_PkgName||'.'||v_prcName );
END;

--============================================================================================
-- Загрузка информации о менеджерах
--============================================================================================
PROCEDURE Load_managers
IS
    v_prcName        CONSTANT VARCHAR2(30) := 'Load_managers';
    v_count          INTEGER := 0;
BEGIN
    Pk01_Syslog.Write_msg('Start', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );
    -- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    -- Импорт менеджеров продаж 
    -- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    MERGE INTO MANAGER_T M
    USING (
        SELECT DISTINCT
               DIRECTORATE,
               SALES_NAME, 
               SUBSTR(SALES_NAME, 1, INSTR(SALES_NAME,' ',1)-1) LAST_NAME,
               SUBSTR(SALES_NAME, INSTR(SALES_NAME,' ',1)+1, 2) FIRST_NAME,
               SUBSTR(SALES_NAME, INSTR(SALES_NAME,'.',1)+1, 2) MIDDLE_NAME 
          FROM PINDB_ALL_CONTRACTS_T
        WHERE SALES_NAME != 'Intercompany'
    ) MS
    ON (M.LAST_NAME = MS.LAST_NAME
    AND SUBSTR(M.FIRST_NAME,1,1) = SUBSTR(MS.FIRST_NAME,1,1)
    AND M.LAST_NAME != 'ЦСС'
    )
    WHEN MATCHED THEN UPDATE SET DEPARTMENT = DIRECTORATE 
    WHEN NOT MATCHED THEN INSERT (MANAGER_ID, CONTRACTOR_ID, DEPARTMENT, LAST_NAME, FIRST_NAME, MIDDLE_NAME, DATE_FROM)
    VALUES(SQ_MANAGER_ID.NEXTVAL, 1, DIRECTORATE, MS.LAST_NAME, MS.FIRST_NAME, MS.MIDDLE_NAME, TO_DATE('01.01.2008','dd.mm.yyyy'));
    v_count := SQL%ROWCOUNT;
    Pk01_Syslog.Write_msg('MANAGER_T.SALES_CURATOR: '||v_count||' rows merged', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );

    -- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    -- Импорт биллинг-кураторов 
    -- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    MERGE INTO MANAGER_T M
    USING (
        SELECT DISTINCT
               DIRECTORATE,
               BILLING_CURATOR, 
               SUBSTR(BILLING_CURATOR, 1, INSTR(BILLING_CURATOR,' ',1)-1) LAST_NAME,
               SUBSTR(BILLING_CURATOR, INSTR(BILLING_CURATOR,' ',1)+1, 2) FIRST_NAME,
               SUBSTR(BILLING_CURATOR, INSTR(BILLING_CURATOR,'.',1)+1, 2) MIDDLE_NAME 
          FROM PINDB_ALL_CONTRACTS_T
        WHERE BILLING_CURATOR != 'Intercompany'
    ) MS
    ON (M.LAST_NAME = MS.LAST_NAME
    AND SUBSTR(M.FIRST_NAME,1,1) = SUBSTR(MS.FIRST_NAME,1,1)
    AND M.LAST_NAME != 'ЦСС'
    )
    WHEN MATCHED THEN UPDATE SET DEPARTMENT = 'ДРУ' 
    WHEN NOT MATCHED THEN INSERT (MANAGER_ID, CONTRACTOR_ID, DEPARTMENT, LAST_NAME, FIRST_NAME, MIDDLE_NAME, DATE_FROM)
    VALUES(SQ_MANAGER_ID.NEXTVAL, 1, 'ДРУ', MS.LAST_NAME, MS.FIRST_NAME, MS.MIDDLE_NAME, TO_DATE('01.01.2008','dd.mm.yyyy'));
    v_count := SQL%ROWCOUNT;
    Pk01_Syslog.Write_msg('MANAGER_T.BILLING_CURATOR: '||v_count||' rows merged', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );
    Gather_Table_Stat(l_Tab_Name => 'MANAGER_T');

    Pk01_Syslog.Write_msg('Stop', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );
EXCEPTION
    WHEN OTHERS THEN
        Pk01_Syslog.raise_Exception('ERROR', c_PkgName||'.'||v_prcName );
END;

--============================================================================================
-- Загрузка информации о клиентах
--============================================================================================
PROCEDURE Load_clients
IS
    v_prcName        CONSTANT VARCHAR2(30) := 'Load_clients';
    v_count          INTEGER := 0;
BEGIN
    Pk01_Syslog.Write_msg('Start', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );
    -- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    INSERT INTO CLIENT_T(CLIENT_ID, CLIENT_NAME, EXTERNAL_ID)
    SELECT DISTINCT CLIENT_ID, CLIENT, CLIENT_ID EXTERNAL_ID 
      FROM PINDB_ALL_CONTRACTS_T PCL;
    v_count := SQL%ROWCOUNT;
    Pk01_Syslog.Write_msg('CLIENT_T: '||v_count||' rows inserted', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );
    Gather_Table_Stat(l_Tab_Name => 'CLIENT_T');
    -- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    Pk01_Syslog.Write_msg('Stop', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );
EXCEPTION
    WHEN OTHERS THEN
        Pk01_Syslog.raise_Exception('ERROR', c_PkgName||'.'||v_prcName );
END;

--============================================================================================
-- Загрузка информации о компаниях - покупателях
--============================================================================================
PROCEDURE Load_customers
IS
    v_prcName        CONSTANT VARCHAR2(30) := 'Load_customers';
    v_count          INTEGER := 0;
BEGIN
    Pk01_Syslog.Write_msg('Start', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );
    -- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    -- подготовка данных проставляем CUSTOMER_ID 
    -- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    EXECUTE IMMEDIATE 'DROP TABLE PINDB_ALL_CONTRACTS_TMP';
    --
    INSERT INTO PINDB_ALL_CONTRACTS_TMP(COMPANY, INN, KPP, ERP_CODE) 
    SELECT NVL(COMPANY,    'NULL') COMPANY, 
           NVL(INN,        'NULL') INN, 
           NVL(KPP,        'NULL') KPP, 
           NVL(KONTRAGENT, 'NULL') ERP_CODE
      FROM PINDB_ALL_CONTRACTS_T PCL
    GROUP BY NVL(COMPANY,  'NULL'), 
           NVL(INN,        'NULL'), 
           NVL(KPP,        'NULL'), 
           NVL(KONTRAGENT, 'NULL');
    --
    UPDATE PINDB_ALL_CONTRACTS_TMP SET CUSTOMER_ID = SQ_CLIENT_ID.NEXTVAL;
    --
    MERGE INTO PINDB_ALL_CONTRACTS_T PCL
    USING (
        SELECT CUSTOMER_ID, COMPANY, INN, KPP, ERP_CODE FROM PINDB_ALL_CONTRACTS_TMP
    ) PCG
    ON (
      NVL(PCL.COMPANY,'NULL')    = PCG.COMPANY AND 
      NVL(PCL.INN,'NULL')        = PCG.INN     AND 
      NVL(PCL.KPP,'NULL')        = PCG.KPP     AND 
      NVL(PCL.KONTRAGENT,'NULL') = PCG.ERP_CODE
    )
    WHEN MATCHED THEN UPDATE SET PCL.CUSTOMER_ID = PCG.CUSTOMER_ID;
    --
    -- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    INSERT INTO CUSTOMER_T (
      CUSTOMER_ID, ERP_CODE, INN, KPP, CUSTOMER, SHORT_NAME, NOTES
    )
    SELECT CUSTOMER_ID, KONTRAGENT, INN, SUBSTR(KPP,1,10) KPP, 
           COMPANY, COMPANY SHORT_NAME, 
           'импортировано из "старого" биллинга 22.09.2014' 
      FROM PINDB_ALL_CONTRACTS_T PCL
     WHERE COMPANY IS NOT NULL
     GROUP BY CUSTOMER_ID, COMPANY, INN, KPP, KONTRAGENT;
    v_count := SQL%ROWCOUNT;
    Pk01_Syslog.Write_msg('CUSTOMER_T: '||v_count||' rows inserted', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );
    Gather_Table_Stat(l_Tab_Name => 'CUSTOMER_T');
    -- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    Pk01_Syslog.Write_msg('Stop', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );
EXCEPTION
    WHEN OTHERS THEN
        Pk01_Syslog.raise_Exception('ERROR', c_PkgName||'.'||v_prcName );
END;

--============================================================================================
-- Загрузка информации о договорах
--============================================================================================
PROCEDURE Load_contracts
IS
    v_prcName        CONSTANT VARCHAR2(30) := 'Load_contracts';
    v_count          INTEGER := 0;
BEGIN
    Pk01_Syslog.Write_msg('Start', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );
    -- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    -- учитываем, что номера договоров могут дублироваться
    --
    UPDATE PINDB_ALL_CONTRACTS_T PCL SET DBL_CONTRACT_NO = NULL;
    --
    MERGE INTO PINDB_ALL_CONTRACTS_T PCL
    USING (
        SELECT CONTRACT_ID, EXTERNAL_ID, CONTRACT_NO, DATE_FROM, DATE_TO, CLIENT_ID, MARKET_SEGMENT_ID, CLIENT_TYPE_ID, NOTES 
          FROM CONTRACT_T C
         WHERE EXISTS (
            SELECT * FROM PINDB_ALL_CONTRACTS_T PCL
             WHERE PCL.ACCOUNT_NO = C.CONTRACT_NO
         )
    ) CT
    ON (
      PCL.ACCOUNT_NO = CT.CONTRACT_NO
    )
    WHEN MATCHED THEN UPDATE SET DBL_CONTRACT_NO = CT.CONTRACT_ID;
    -- 
    -- импортируем договоры, с уникальными номерами
    --
    INSERT INTO CONTRACT_T (
        CONTRACT_ID, EXTERNAL_ID, CONTRACT_NO, DATE_FROM, DATE_TO, 
        CLIENT_ID, MARKET_SEGMENT_ID, CLIENT_TYPE_ID, NOTES
    )
    SELECT ACCOUNT_ID, ACCOUNT_ID EXTERNAL_ID, ACCOUNT_NO, CUSTDATE, NULL DATE_TO, CLIENT_ID, 
           MRK.KEY_ID MARKET_SEGMENT_ID, 
           CST.KEY_ID CLIENT_TYPE_ID,    
           'импортировано из "старого" биллинга 22.09.2014' NOTES
      FROM PINDB_ALL_CONTRACTS_T PCL, DICTIONARY_T MRK, DICTIONARY_T CST
     WHERE PCL.MARKET_SEG = MRK.NAME(+)
       AND MRK.PARENT_ID(+) = 64
       AND PCL.CUST_TYPE  = CST.NAME(+)
       AND CST.PARENT_ID(+) = 63
       AND DBL_CONTRACT_NO IS NULL
    GROUP BY ACCOUNT_ID, ACCOUNT_NO, CUSTDATE, CLIENT_ID, MRK.KEY_ID, CST.KEY_ID
    ;
    v_count := SQL%ROWCOUNT;
    Pk01_Syslog.Write_msg('CONTRACT_T: '||v_count||' rows merged', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );
    Gather_Table_Stat(l_Tab_Name => 'CONTRACT_T');
    --
    -- проставляем биллинг-куратора на договор
    --
    MERGE INTO BILLING_CURATOR_T BC
    USING (
        SELECT PC.ACCOUNT_ID CONTRACT_ID, PC.BILLING_CURATOR, M.MANAGER_ID 
          FROM PINDB_ALL_CONTRACTS_T PC, MANAGER_T M
         WHERE PC.BILLING_CURATOR = M.LAST_NAME||' '||SUBSTR(M.FIRST_NAME,1,1)||'.'||SUBSTR(M.MIDDLE_NAME,1,1)||'.' -- 37 791
           AND PC.DBL_CONTRACT_NO IS NULL
    ) MG
    ON (
        BC.CONTRACT_ID = MG.CONTRACT_ID
    )
    WHEN MATCHED THEN UPDATE SET BC.MANAGER_ID = MG.MANAGER_ID
    WHEN NOT MATCHED THEN INSERT (BC.CONTRACT_ID, BC.MANAGER_ID) 
                          VALUES (MG.CONTRACT_ID, MG.MANAGER_ID)
    ;
    v_count := SQL%ROWCOUNT;
    Pk01_Syslog.Write_msg('BILLING_CURATOR_T: '||v_count||' rows merged', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );
    Gather_Table_Stat(l_Tab_Name => 'BILLING_CURATOR_T');
    --
    -- проставляем продавца-куратора на договор
    --
    MERGE INTO SALE_CURATOR_T SC
    USING (
        SELECT PC.ACCOUNT_ID CONTRACT_ID, PC.BILLING_CURATOR, M.MANAGER_ID, PC.CUSTDATE 
          FROM PINDB_ALL_CONTRACTS_T PC, MANAGER_T M
         WHERE PC.SALES_NAME = M.LAST_NAME||' '||SUBSTR(M.FIRST_NAME,1,1)||'.'||SUBSTR(M.MIDDLE_NAME,1,1)||'.' -- 37 791
           AND PC.DBL_CONTRACT_NO IS NULL
    ) MG
    ON (
        SC.CONTRACT_ID = MG.CONTRACT_ID
    )
    WHEN MATCHED THEN UPDATE SET SC.MANAGER_ID = MG.MANAGER_ID, SC.DATE_FROM = MG.CUSTDATE 
    WHEN NOT MATCHED THEN INSERT (SC.CONTRACT_ID, SC.MANAGER_ID, SC.DATE_FROM) 
                          VALUES (MG.CONTRACT_ID, MG.MANAGER_ID, MG.CUSTDATE)
    ;
    v_count := SQL%ROWCOUNT;
    Pk01_Syslog.Write_msg('SALE_CURATOR_T: '||v_count||' rows merged', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );
    Gather_Table_Stat(l_Tab_Name => 'SALE_CURATOR_T');
    -- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    Pk01_Syslog.Write_msg('Stop', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );
EXCEPTION
    WHEN OTHERS THEN
        Pk01_Syslog.raise_Exception('ERROR', c_PkgName||'.'||v_prcName );
END;

--============================================================================================
-- Загрузка информации о лицевых счетах клиентов
--============================================================================================
PROCEDURE Load_accounts
IS
    v_prcName        CONSTANT VARCHAR2(30) := 'Load_accounts';
    v_count          INTEGER := 0;
    v_account_id     INTEGER;
    v_address_id     INTEGER;
    v_profile_id     INTEGER;
BEGIN
    Pk01_Syslog.Write_msg('Start', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );
    -- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    FOR ra IN (
      SELECT P.CUSTNO ACCOUNT_NO, P.CUSTDATE DATE_FROM,
             P.ACCOUNT_ID CONTRACT_ID, P.CLIENT_ID, 
             P.CONTRACTOR_ID BRANCH_ID, P.CUSTOMER_ID,
             P.CURRENCY, P.CURRENCY_SECONDARY, P.TAX_VAT, 
             P.DELIVERY, D.KEY_ID DELIVERY_ID,
             SUBSTR(P.JUR_ZIP,1,20)JUR_ZIP,  P.JUR_CITY,  P.JUR_ADDRESS,
             SUBSTR(P.PHIS_ZIP,1,20) PHIS_ZIP, P.PHIS_CITY, P.PHIS_ADDRESS, 
             P.PHONE, P.FAX, P.EMAIL_ADDR, P.PHIS_NAME
        FROM PINDB_ALL_CONTRACTS_T P, DICTIONARY_T D
       WHERE P.DBL_CONTRACT_NO IS NULL
         AND P.CUSTOMER_ID IS NOT NULL
         AND P.CURRENCY = Pk00_Const.c_CURRENCY_RUB             -- 810
         AND P.CURRENCY_SECONDARY = 0
         AND P.DELIVERY = D.NOTES(+)
         AND D.PARENT_ID(+) = Pk00_Const.k_DICT_DELIVERY_METHOD -- 65  
    )
    LOOP
      -- - - - - - - - - - - - - - - - - - - - - - - - - - - --
      -- создаем л/с
      v_account_id := Pk05_Account.New_account(
                   p_account_no    => ra.account_no,
                   p_account_type  => Pk00_Const.c_ACC_TYPE_J,
                   p_currency_id   => ra.currency,
                   p_status        => Pk00_Const.c_ACC_STATUS_BILL,
                   p_parent_id     => NULL,
                   p_notes         => 'импортировано из "старого" биллинга 22.09.2014'
               );
      -- проставляем принадлежность старому биллингу
      Pk05_Account.Set_billing(
                   p_account_id => v_account_id,
                   p_billing_id => Pk00_Const.c_BILLING_OLD
               );
      
      -- - - - - - - - - - - - - - - - - - - - - - - - - - - --
      -- создаем юридический адрес
      v_address_id := PK05_ACCOUNT.Add_address(
                  p_account_id    => v_account_id,
                  p_address_type  => PK00_CONST.c_ADDR_TYPE_JUR,
                  p_country       => 'РФ',
                  p_zip           => ra.jur_zip,
                  p_state         => NULL,
                  p_city          => ra.jur_city,
                  p_address       => ra.jur_address,
                  p_person        => NULL,
                  p_phones        => NULL,
                  p_fax           => NULL,
                  p_email         => NULL,
                  p_date_from     => ra.date_from,
                  p_date_to       => NULL,
                  p_notes         => 'импортировано из "старого" биллинга 22.09.2014'
             );

      -- - - - - - - - - - - - - - - - - - - - - - - - - - - --
      -- создаем адрес доставки
      v_address_id := PK05_ACCOUNT.Add_address(
                  p_account_id    => v_account_id,
                  p_address_type  => PK00_CONST.c_ADDR_TYPE_DLV,
                  p_country       => 'РФ',
                  p_zip           => ra.phis_zip,
                  p_state         => NULL,
                  p_city          => ra.phis_city,
                  p_address       => ra.phis_address,
                  p_person        => ra.phis_name,
                  p_phones        => ra.phone,
                  p_fax           => ra.fax,
                  p_email         => ra.email_addr,
                  p_date_from     => ra.date_from,
                  p_date_to       => NULL,
                  p_notes         => 'импортировано из "старого" биллинга 22.09.2014'
             );

      -- - - - - - - - - - - - - - - - - - - - - - - - - - - --
      -- создаем профиль лицевого счета
      v_profile_id := Pk05_Account.Set_profile(
                 p_account_id         => v_account_id,
                 p_brand_id           => NULL,
                 p_contract_id        => ra.Contract_Id,
                 p_customer_id        => ra.Customer_Id,
                 p_subscriber_id      => NULL,
                 p_contractor_id      => Pk00_Const.c_CONTRACTOR_KTTK_ID,
                 p_branch_id          => ra.Branch_Id,
                 p_agent_id           => NULL,
                 p_contractor_bank_id => NULL,
                 p_vat                => ra.Tax_Vat,
                 p_date_from          => ra.Date_From,
                 p_date_to            => NULL
             );

      -- - - - - - - - - - - - - - - - - - - - - - - - - - - --
      -- создаем описатель счетов для нового Л/С
      Pk07_Bill.New_billinfo (
                 p_account_id    => v_account_id,   -- ID лицевого счета
                 p_currency_id   => ra.currency,     -- ID валюты счета
                 p_delivery_id   => ra.delivery_id, -- ID способа доставки счета
                 p_days_for_payment => 30           -- кол-во дней на оплату счета
             );

      v_count := v_count + 1;
      
    END LOOP;
    
    Pk01_Syslog.Write_msg('ACCOUNT_T: '||v_count||' rows inserted', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );
    
    -- проставляем связку по ACCOUNT_ID между старым и BRM биллингами
    MERGE INTO ACCOUNT_T A
    USING (
        SELECT ACCOUNT_ID, CUSTNO FROM PINDB_ALL_CONTRACTS_T 
    ) PA
    ON (
      A.ACCOUNT_NO = PA.CUSTNO AND
      A.BILLING_ID = Pk00_Const.c_BILLING_OLD -- 2002
    )
    WHEN MATCHED THEN UPDATE SET A.EXTERNAL_ID = PA.ACCOUNT_ID;
    v_count := SQL%ROWCOUNT;
    Pk01_Syslog.Write_msg('ACCOUNT_T: '||v_count||' rows inserted', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );
    Gather_Table_Stat(l_Tab_Name => 'ACCOUNT_T');
    -- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    Pk01_Syslog.Write_msg('Stop', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );
EXCEPTION
    WHEN OTHERS THEN
        Pk01_Syslog.raise_Exception('ERROR:'||v_count||' row', c_PkgName||'.'||v_prcName );
END;


--============================================================================================
-- Загрузка информации о заказах
--============================================================================================
PROCEDURE Load_orders
IS
    v_prcName        CONSTANT VARCHAR2(30) := 'Load_orders';
    v_count          INTEGER := 0;
BEGIN
    Pk01_Syslog.Write_msg('Start', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );
    
    -- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    -- убираем дубликаты (заказы которые уже есть в BRM)
    UPDATE PINDB_ORDERS_T PO SET PO.DBL_ORDER_NO = 1
    WHERE EXISTS (
      SELECT * FROM ORDER_T O
       WHERE O.ORDER_NO = PO.ORDER_NO
    );
    
    -- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    -- создаем заказы
    INSERT INTO ORDER_T(
        ORDER_ID, EXTERNAL_ID, ORDER_NO, ACCOUNT_ID, SERVICE_ID, RATEPLAN_ID, 
        DATE_FROM, DATE_TO, CREATE_DATE, MODIFY_DATE, STATUS, NOTES
    )
    WITH PO AS (
        SELECT PO.POID_ID0 EXTERNAL_ID, A.ACCOUNT_ID, PO.ORDER_NO, PO.ORDER_DATE, 
               DECODE(PO.SERV_CODE, 3, Pk00_Const.c_SERVICE_CALL_MGMN, -- 1, 
                                    7, Pk00_Const.c_SERVICE_CALL_FREE, --2,
                                    NULL) SERVICE_ID, PO.SERVICE, 
               RP.RATEPLAN_ID, RP.RATEPLAN_NAME, 
               PO.BILL_START_T, BILL_END_T,
               CASE
               WHEN BILL_END_T IS NULL THEN 'OPEN'
               ELSE 'CLOSE'
               END STATUS,
               'импортировано из "старого" биллинга 22.09.2014' NOTES
          FROM PINDB_ORDERS_T PO, ACCOUNT_T A, RATEPLAN_T RP
         WHERE A.EXTERNAL_ID = PO.ACCOUNT_OBJ_ID0
           AND A.BILLING_ID = Pk00_Const.c_BILLING_OLD -- 2002
           AND PO.ORDER_NO = RP.RATEPLAN_CODE(+)
           AND PO.DBL_ORDER_NO IS NULL
    )
    SELECT SQ_ORDER_ID.NEXTVAL ORDER_ID, EXTERNAL_ID, ORDER_NO, ACCOUNT_ID, SERVICE_ID, RATEPLAN_ID,
           PO.BILL_START_T, BILL_END_T, ORDER_DATE, TO_DATE(NULL) MODIFY_DATE, STATUS, NOTES
      FROM PO
    ;
    v_count := SQL%ROWCOUNT;
    Pk01_Syslog.Write_msg('ORDER_T: '||v_count||' rows inserted', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );
    Gather_Table_Stat(l_Tab_Name => 'ORDER_T');
    
    -- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    -- создаем компоненты услуг для МГ и МГ/МН - заказов
    -- добавляем новую запись
    INSERT INTO ORDER_BODY_T (
        ORDER_BODY_ID, ORDER_ID, SUBSERVICE_ID, CHARGE_TYPE, 
        RATEPLAN_ID, DATE_FROM, DATE_TO, CREATE_DATE, MODIFY_DATE
    )
    SELECT SQ_ORDER_ID.NEXTVAL ORDER_BODY_ID, O.ORDER_ID,
           Pk00_Const.c_SUBSRV_MG, Pk00_Const.c_CHARGE_TYPE_USG,
           NULL RATEPLAN_ID, O.DATE_FROM, O.DATE_TO, O.CREATE_DATE, SYSDATE
      FROM PINDB_ORDERS_T PO, ORDER_T O
     WHERE PO.POID_ID0 = O.EXTERNAL_ID
       AND (PO.ORDER_SUBSERVICE_ID IS NULL OR 
            PO.ORDER_SUBSERVICE_ID = Pk00_Const.c_SUBSRV_MG)
       AND PO.DBL_ORDER_NO IS NULL
       AND PO.SERV_CODE = 3
       AND O.SERVICE_ID = Pk00_Const.c_SERVICE_CALL_MGMN
    ;
    v_count := SQL%ROWCOUNT;
    Pk01_Syslog.Write_msg('ORDER_BODY_T: '||v_count||' mg rows inserted', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );    
    
    -- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    -- создаем компоненты услуг для МН и МГ/МН  - заказов
    INSERT INTO ORDER_BODY_T (
        ORDER_BODY_ID, ORDER_ID, SUBSERVICE_ID, CHARGE_TYPE, 
        RATEPLAN_ID, DATE_FROM, DATE_TO, CREATE_DATE, MODIFY_DATE
    )
    SELECT SQ_ORDER_ID.NEXTVAL ORDER_BODY_ID, O.ORDER_ID,
           Pk00_Const.c_SUBSRV_MN, Pk00_Const.c_CHARGE_TYPE_USG,
           NULL RATEPLAN_ID, O.DATE_FROM, O.DATE_TO, O.CREATE_DATE, SYSDATE
      FROM PINDB_ORDERS_T PO, ORDER_T O
     WHERE PO.POID_ID0 = O.EXTERNAL_ID
       AND (PO.ORDER_SUBSERVICE_ID IS NULL OR 
            PO.ORDER_SUBSERVICE_ID = Pk00_Const.c_SUBSRV_MN)
       AND PO.DBL_ORDER_NO IS NULL
       AND PO.SERV_CODE = 3
       AND O.SERVICE_ID = Pk00_Const.c_SERVICE_CALL_MGMN
    ;
    v_count := SQL%ROWCOUNT;
    Pk01_Syslog.Write_msg('ORDER_BODY_T: '||v_count||' mg rows inserted', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );
    
    -- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    -- создаем компоненты услуг для Free-call - заказов
    INSERT INTO ORDER_BODY_T (
        ORDER_BODY_ID, ORDER_ID, SUBSERVICE_ID, CHARGE_TYPE, 
        RATEPLAN_ID, DATE_FROM, DATE_TO, CREATE_DATE, MODIFY_DATE
    )
    SELECT SQ_ORDER_ID.NEXTVAL ORDER_BODY_ID, O.ORDER_ID,
           Pk00_Const.c_SUBSRV_FREE, Pk00_Const.c_CHARGE_TYPE_USG,
           NULL RATEPLAN_ID, O.DATE_FROM, O.DATE_TO, O.CREATE_DATE, SYSDATE
      FROM PINDB_ORDERS_T PO, ORDER_T O
     WHERE PO.POID_ID0 = O.EXTERNAL_ID
       AND PO.DBL_ORDER_NO IS NULL
       AND PO.SERV_CODE = 7
       AND O.SERVICE_ID = Pk00_Const.c_SERVICE_CALL_FREE
    ;
    v_count := SQL%ROWCOUNT;
    Pk01_Syslog.Write_msg('ORDER_BODY_T: '||v_count||' freecall rows inserted', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );    
    
    Gather_Table_Stat(l_Tab_Name => 'ORDER_BODY_T');
    
    -- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    Pk01_Syslog.Write_msg('Stop', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );
EXCEPTION
    WHEN OTHERS THEN
        Pk01_Syslog.raise_Exception('ERROR:'||v_count||' row', c_PkgName||'.'||v_prcName );
END;

--============================================================================================
-- Загрузка информации об абонплатах и доплатах до минимального трафика 
--============================================================================================
PROCEDURE Load_fixrates
IS
    v_prcName        CONSTANT VARCHAR2(30) := 'Load_fixrates';
    v_count          INTEGER := 0;
BEGIN
    Pk01_Syslog.Write_msg('Start', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );
    -- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    -- Импорт информации о доплатах до минимального трафика
    -- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    MERGE INTO FIX_RATE_T FR 
    USING (
        SELECT NULL FIX_RATE_ID, 'MIN' CHARGE_TYPE, PF.CYCLE_FEE_AMT VALUE, O.ORDER_ID, 
               'Импортировано из PINDB_FIXRATES_T' RATE_DESCR  
          FROM PINDB_FIXRATES_T PF, ORDER_T O
         WHERE (PF.PRODUCT_PLAN LIKE '%minimal%' OR PF.PRODUCT_PLAN IN ('Voice in Roubles','Voice'))
           AND PF.CYCLE_FEE_AMT > 0
           AND PF.ORDER_NO = O.ORDER_NO
    ) PF
    ON (PF.ORDER_ID = FR.ORDER_ID AND PF.CHARGE_TYPE = FR.CHARGE_TYPE )
    WHEN MATCHED THEN UPDATE SET FR.VALUE = PF.VALUE, FR.RATE_DESCR = PF.RATE_DESCR
    WHEN NOT MATCHED THEN INSERT (FR.FIX_RATE_ID, FR.CHARGE_TYPE, FR.VALUE, FR.ORDER_ID, FR.RATE_DESCR)
    VALUES(SQ_RATEPLAN_ID.NEXTVAL, PF.CHARGE_TYPE, PF.VALUE, PF.ORDER_ID, PF.RATE_DESCR);

    v_count := SQL%ROWCOUNT;
    Pk01_Syslog.Write_msg('FIX_RATE_T: '||v_count||' rows merged', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );
    Gather_Table_Stat(l_Tab_Name => 'FIX_RATE_T');

    Pk01_Syslog.Write_msg('Stop', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );
EXCEPTION
    WHEN OTHERS THEN
        Pk01_Syslog.raise_Exception('ERROR', c_PkgName||'.'||v_prcName );
END;





/*
--============================================================================================
-- Загрузка данных в биллинг
--
PROCEDURE Load_customers
IS
    v_prcName        CONSTANT VARCHAR2(30) := 'Load_customers';
    v_count          INTEGER := 0;
    v_client_id      INTEGER;
    v_customer_id    INTEGER;
    v_contract_id    INTEGER;
    v_account_id     INTEGER;
    v_address_id     INTEGER; 
    v_profile_id     INTEGER;
    v_bill_id        INTEGER;
    v_order_id       INTEGER;
    v_order_to       DATE;
BEGIN
    --
    FOR r_cust IN (
        SELECT BRAND, CLIENT_NAME, CONTRACT_NO, CUSTOMER, INN, KPP, 
               ACCOUNT_NO, CURRENCY_ID, ORDER_NO, ORDER_DATE, SERVICE_NAME, 
               DATE_FROM, NVL(DATE_TO, Pk00_Const.c_DATE_MAX) DATE_TO, 
               JUR_ZIP, JUR_REGION, JUR_CITY, JUR_ADDRESS, 
               DLV_ZIP, DLV_REGION, DLV_CITY, DLV_ADDRESS, 
               SAVE_DATE, STATUS 
        FROM PK204_SPB_IMPORT_T
        WHERE STATUS IS NULL
        ORDER BY CLIENT_NAME, CUSTOMER, CONTRACT_NO, ACCOUNT_NO, ORDER_DATE, ORDER_NO
      )
    LOOP  
        -- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
        -- находим клиента клиента
        BEGIN
            SELECT CL.CLIENT_ID
              INTO v_client_id
              FROM CLIENT_T CL
             WHERE CL.CLIENT_NAME = r_cust.client_name;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            -- Создать клиента
            v_client_id := Pk11_Client.New_client(
                      p_name => r_cust.client_name
                   );    
            Pk01_Syslog.Write_msg('new client_id='||v_client_id, c_PkgName||'.'||v_prcName);
        END;
        
        -- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
        -- находим компанию-заказчика
        BEGIN
            SELECT CS.CUSTOMER_ID
              INTO v_customer_id
              FROM CUSTOMER_T CS
             WHERE CS.CUSTOMER = r_cust.customer
               AND CS.INN      = r_cust.inn
               AND CS.KPP      = r_cust.kpp;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            -- Создать покупателя
            v_customer_id := Pk13_Customer.New_customer(
                      p_erp_code    => NULL,
                      p_inn         => r_cust.inn,
                      p_kpp         => r_cust.kpp, 
                      p_name        => r_cust.customer,
                      p_short_name  => r_cust.customer
                   );
            Pk01_Syslog.Write_msg('new customer_id='||v_customer_id, c_PkgName||'.'||v_prcName);
        END;
        
        -- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
        -- находим договор
        BEGIN
            SELECT C.CONTRACT_ID
              INTO v_contract_id
              FROM CONTRACT_T C
             WHERE C.CONTRACT_NO = r_cust.contract_no;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            NULL;
            -- Создать договор
            v_contract_id := PK12_CONTRACT.Open_contract(
                      p_contract_no=> r_cust.contract_no,
                      p_date_from  => r_cust.order_date,
                      p_date_to    => NULL,
                      p_client_id  => v_client_id,
                      p_manager_id => NULL
                   );
            Pk01_Syslog.Write_msg('new contract_id='||v_contract_id, c_PkgName||'.'||v_prcName);
        END;
        
        -- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
        -- находим лицевой счет
        BEGIN
            SELECT A.ACCOUNT_ID
              INTO v_account_id
              FROM ACCOUNT_T A
             WHERE A.ACCOUNT_NO = r_cust.account_no;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            NULL;
            -- Создать лицевой счет покупателя
            v_account_id := PK05_ACCOUNT.New_account(
                      p_account_no   => r_cust.account_no,
                      p_account_type => PK00_CONST.c_ACC_TYPE_J,
                      p_currency_id  => PK00_CONST.c_CURRENCY_RUB,
                      p_status       => PK00_CONST.c_ACC_STATUS_BILL,
                      p_parent_id    => NULL
                   );
            Pk01_Syslog.Write_msg('new account_id='||v_account_id, c_PkgName||'.'||v_prcName);
            --
            -- Добавить Юридический адрес на л/с
            v_address_id := PK05_ACCOUNT.Add_address(
                      p_account_id    => v_account_id,
                      p_address_type  => PK00_CONST.c_ADDR_TYPE_JUR,
                      p_country       => 'РФ',
                      p_zip           => r_cust.jur_zip,
                      p_state         => r_cust.jur_region,
                      p_city          => r_cust.jur_city,
                      p_address       => r_cust.jur_address,
                      p_person        => NULL,
                      p_phones        => NULL,
                      p_fax           => NULL,
                      p_email         => NULL,
                      p_date_from     => r_cust.order_date,
                      p_date_to       => NULL,
                      p_notes         => NULL
                   );
            Pk01_Syslog.Write_msg('new jur_address_id='||v_address_id, c_PkgName||'.'||v_prcName);
            --
            -- Добавить адрес доставки на л/с
            v_address_id := PK05_ACCOUNT.Add_address(
                      p_account_id    => v_account_id,
                      p_address_type  => PK00_CONST.c_ADDR_TYPE_DLV,
                      p_country       => 'РФ',
                      p_zip           => r_cust.dlv_zip,
                      p_state         => r_cust.dlv_region,
                      p_city          => r_cust.dlv_city,
                      p_address       => r_cust.dlv_address,
                      p_person        => NULL,
                      p_phones        => NULL,
                      p_fax           => NULL,
                      p_email         => NULL,
                      p_date_from     => r_cust.order_date,
                      p_date_to       => NULL,
                      p_notes         => NULL
                   );
            Pk01_Syslog.Write_msg('new dlv_address_id='||v_address_id, c_PkgName||'.'||v_prcName);
            --
            -- создать описатель счетов и самих счетов для нового Л/С
            v_bill_id := Pk07_Bill.New_billinfo (
                           p_account_id    => v_account_id,   -- ID лицевого счета
                           p_currency_id   => Pk00_Const.c_CURRENCY_RUB  -- ID валюты счета
                       );

            Pk01_Syslog.Write_msg('bill_id='||v_bill_id, c_PkgName||'.'||v_prcName);
            --
        END;
        
        -- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
        -- находим профиль лицевого счета
        BEGIN
            SELECT AP.PROFILE_ID
              INTO v_profile_id
              FROM ACCOUNT_PROFILE_T AP
             WHERE AP.ACCOUNT_ID  = v_account_id
               AND AP.CONTRACT_ID = v_contract_id
               AND AP.CUSTOMER_ID = v_customer_id
               AND AP.DATE_TO IS NULL;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            -- закрыть текущий профильл/с
            UPDATE ACCOUNT_PROFILE_T AP
               SET AP.DATE_TO = r_cust.order_date-1/86400
             WHERE AP.ACCOUNT_ID  = v_account_id
               AND AP.DATE_TO IS NULL;
            -- создать профиль лицевого счета
            v_profile_id := PK05_ACCOUNT.Set_profile(
                       p_account_id    => v_account_id,
                       p_contract_id   => v_contract_id,
                       p_customer_id   => v_customer_id,
                       p_subscriber_id => NULL,
                       p_contractor_id => c_CONTRACTOR_KTTK_ID,
                       p_branch_id     => c_CONTRACTOR_SPB_XTTK_ID,
                       p_agent_id      => NULL,
                       p_contractor_bank_id => NULL,
                       p_vat           => Pk00_Const.c_VAT,
                       p_date_from     => r_cust.order_date,
                       p_date_to       => NULL
                   );
            Pk01_Syslog.Write_msg('v_profile_id='||v_profile_id, c_PkgName||'.'||v_prcName);
        END;

        -- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
        -- находим заказ на лицевом счете
        BEGIN
            SELECT O.ORDER_ID, O.DATE_TO
              INTO v_order_id, v_order_to
              FROM ORDER_T O
             WHERE O.ORDER_NO = r_cust.order_no;
            --
            -- закрываем заказ если нужно 
            IF r_cust.date_to < v_order_to THEN
                PK06_ORDER.Close_order(
                           p_order_id => v_order_id, 
                           p_date_to  => r_cust.date_to
                       );
            END IF;  
            --
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            NULL;
            -- создаем заказ
            v_order_id := PK06_ORDER.New_order(
                           p_account_id    => v_account_id,
                           p_order_no      => r_cust.order_no,
                           p_service_id    => PK00_CONST.c_SERVICE_OP_LOCAL,
                           p_rateplan_id   => NULL,
                           p_time_zone     => NULL,
                           p_date_from     => r_cust.date_from,
                           p_date_to       => r_cust.date_to,
                           p_create_date   => SYSDATE
                       );
        END;
        --
        
        --
        v_count := v_count + 1;
        --
    END LOOP;

    Pk01_Syslog.Write_msg('processed = '||v_count||' rows', c_PkgName||'.'||v_prcName);

EXCEPTION
    WHEN OTHERS THEN
        Pk01_Syslog.raise_Exception('ERROR', c_PkgName||'.'||v_prcName );
END;


-- ============================================================================== --
-- Удалить клиента (все что создано процедурой New_client)
-- ============================================================================== --
PROCEDURE Remove_client(
                  p_account_id IN INTEGER
               )
IS
    v_prcName        CONSTANT VARCHAR2(30) := 'Remove_client';
    --
    v_acc_type       ACCOUNT_T.ACCOUNT_TYPE%TYPE;
    v_order_id       INTEGER;
    v_rateplan_id    INTEGER;
    v_customer_id    INTEGER;
    v_contract_id    INTEGER;
    v_client_id      INTEGER;
    v_profile_id     INTEGER;
    v_count          INTEGER;
    --
BEGIN
    Pk01_Syslog.Write_msg('Start.', c_PkgName||'.'||v_prcName);
    -- убеждаемся что л/с существует и принадлежит "Ю"рику
    SELECT ACCOUNT_TYPE INTO v_acc_type
    FROM ACCOUNT_T
    WHERE ACCOUNT_ID = p_account_id;
    IF v_acc_type != 'J' THEN
        Pk01_Syslog.Write_msg('Account_id='||p_account_id||', has a wrong type "'||v_acc_type||'"', c_PkgName||'.'||v_prcName);
        RAISE_APPLICATION_ERROR(Pk01_Syslog.n_APP_EXCEPTION, 'Account_id='||p_account_id||', has a wrong type "'||v_acc_type||'"');
    END IF;

    -- удаляем обороты за месяц
    DELETE FROM REP_PERIOD_INFO_T RP
    WHERE RP.ACCOUNT_ID = p_account_id;
    v_count := SQL%ROWCOUNT;
    Pk01_Syslog.Write_msg('REP_PERIOD_INFO_T: '||v_count||' rows deleted', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );

    -- удаляем INVOICE_ITEM
    DELETE FROM INVOICE_ITEM_T II
    WHERE II.BILL_ID IN (
        SELECT B.BILL_ID FROM BILL_T B
        WHERE B.ACCOUNT_ID = p_account_id
    );
    v_count := SQL%ROWCOUNT;
    Pk01_Syslog.Write_msg('INVOICE_ITEM_T: '||v_count||' rows deleted', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );
    
    -- удаляем ITEM
    DELETE FROM ITEM_T I
    WHERE EXISTS (
        SELECT * FROM BILL_T B
         WHERE B.ACCOUNT_ID = p_account_id
           AND I.BILL_ID = B.BILL_ID
           AND I.REP_PERIOD_ID = B.REP_PERIOD_ID
    );
    v_count := SQL%ROWCOUNT;
    Pk01_Syslog.Write_msg('ITEM_T: '||v_count||' rows deleted', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );
    
    -- удаляем BILLINFO_T
    DELETE FROM BILLINFO_T
    WHERE ACCOUNT_ID = p_account_id;
    v_count := SQL%ROWCOUNT;
    Pk01_Syslog.Write_msg('BILLINFO_T: '||v_count||' rows deleted', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );
    
    -- удаляем BILL_T
    DELETE FROM BILL_T
    WHERE ACCOUNT_ID = p_account_id;
    v_count := SQL%ROWCOUNT;
    Pk01_Syslog.Write_msg('BILL_T: '||v_count||' rows deleted', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );
    
    -- удаляем данные заказа (заказ создавали один)
    SELECT ORDER_ID, RATEPLAN_ID INTO v_order_id, v_rateplan_id
    FROM ORDER_T
    WHERE ACCOUNT_ID = p_account_id;
    
    -- удаляем привязку менеджера к клиенту
    DELETE FROM SALE_CURATOR_T
    WHERE ACCOUNT_ID = p_account_id OR ORDER_ID = v_order_id;
    v_count := SQL%ROWCOUNT;
    Pk01_Syslog.Write_msg('SALE_CURATOR_T: '||v_count||' rows deleted', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );
   
    -- удаляем строки заказа
    DELETE FROM ORDER_BODY_T
    WHERE ORDER_ID = v_order_id;
    v_count := SQL%ROWCOUNT;
    Pk01_Syslog.Write_msg('ORDER_BODY_T: '||v_count||' rows deleted', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );
    
    -- удаляем заказ
    DELETE FROM ORDER_T 
    WHERE ORDER_ID = v_order_id;
    v_count := SQL%ROWCOUNT;
    Pk01_Syslog.Write_msg('ORDER_T: '||v_count||' rows deleted', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );
    
    -- удалем тарифный план (при новом импорте воссоздадим)
    --DELETE FROM RATEPLAN_T
    --WHERE RATEPLAN_ID = v_rateplan_id;
    -- удаляем адреса
    DELETE FROM ACCOUNT_CONTACT_T
    WHERE ACCOUNT_ID = p_account_id;
    v_count := SQL%ROWCOUNT;
    Pk01_Syslog.Write_msg('ACCOUNT_CONTACT_T: '||v_count||' rows deleted', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );
    --    
    -- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
    -- Удаляем окружение
    -- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    SELECT AP.PROFILE_ID, AP.CONTRACT_ID, AP.CUSTOMER_ID, C.CLIENT_ID
    INTO v_profile_id, v_contract_id, v_customer_id, v_client_id
    FROM ACCOUNT_PROFILE_T AP, CONTRACT_T C
    WHERE AP.ACCOUNT_ID = p_account_id
      AND AP.CONTRACT_ID = C.CONTRACT_ID;
    -- удаляем ACCOUNT_PROFILE_T
    DELETE FROM ACCOUNT_PROFILE_T
    WHERE PROFILE_ID = v_profile_id;
    v_count := SQL%ROWCOUNT;
    Pk01_Syslog.Write_msg('ACCOUNT_PROFILE_T: '||v_count||' rows deleted', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );
    
    -- удаляем лицевой счет
    DELETE FROM ACCOUNT_T
    WHERE ACCOUNT_ID = p_account_id;
    v_count := SQL%ROWCOUNT;
    Pk01_Syslog.Write_msg('ACCOUNT_T: '||v_count||' rows deleted', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );
    
    -- удаляем договор
--    DELETE FROM CONTRACT_T
--    WHERE CONTRACT_ID = v_contract_id;
    -- удаляем клиента
--    DELETE FROM CLIENT_T
--    WHERE CLIENT_ID = v_client_id;
    -- удаляем юр.адрес покупателя
    DELETE FROM CUSTOMER_ADDRESS_T
    WHERE CUSTOMER_ID = v_customer_id;
    v_count := SQL%ROWCOUNT;
    Pk01_Syslog.Write_msg('CUSTOMER_ADDRESS_T.JUR: '||v_count||' rows deleted', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );
    
    -- удаляем покупателя
    DELETE FROM CUSTOMER_T
    WHERE CUSTOMER_ID = v_customer_id;
    v_count := SQL%ROWCOUNT;
    Pk01_Syslog.Write_msg('CUSTOMER_ADDRESS_T.DLV: '||v_count||' rows deleted', c_PkgName||'.'||v_prcName, Pk01_Syslog.L_info );
    --
    Pk01_Syslog.Write_msg('The end.', c_PkgName||'.'||v_prcName);
EXCEPTION
    WHEN OTHERS THEN
        Pk01_Syslog.raise_Exception('ERROR', c_PkgName||'.'||v_prcName );
END;
*/
END PK208_PINDB_IMPORT;
/
