CREATE OR REPLACE PACKAGE PK102_RECEIPT_FOR_PAYMENT
IS
    --
    -- Пакет для печати КВИТАНЦИЙ на оплату для ФИЗИЧЕСКИХ ЛИЦ
    --
    -- ==============================================================================
    c_PkgName   constant varchar2(30) := 'PK102_RECEIPT_FOR_PAYMENT';
    -- ==============================================================================
    c_RET_OK    constant integer := 0;
    c_RET_ER		constant integer :=-1;
    
    type t_refc is ref cursor;

    -- Общая информация счет + данные продавца + данные клиента:
    --   - при ошибке выставляет исключение
    PROCEDURE kvitok_header( 
                   p_recordset OUT t_refc, 
                   p_account_id IN INTEGER,      -- ID лицевого счета            
                   p_period_id  IN INTEGER       -- ID отчетного периода
               );          

    -- получить данные для печати: "Итоги за период"
    --   - при ошибке выставляет исключение
    PROCEDURE kvitok_summ( 
                   p_recordset OUT t_refc, 
                   p_account_id IN INTEGER,      -- ID лицевого счета
                   p_period_id  IN INTEGER       -- ID отчетного периода
               );
    
    -- получить данные для печати позиций счета (начисления)
    --   - при ошибке выставляет исключение
    PROCEDURE kvitok_invoices( 
                   p_recordset OUT t_refc, 
                   p_account_id IN INTEGER,      -- ID лицевого счета
                   p_period_id  IN INTEGER       -- ID отчетного периода
               );

-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
-- Получение позиций счета (item-ы)
    PROCEDURE kvitok_bill_items( 
         p_result        OUT VARCHAR2, 
         p_recordset     OUT t_refc, 
         p_account_id    IN NUMBER,     -- номер лицевого счета
         p_rep_period_id IN NUMBER      -- период счета         
    );
    
    -- получить данные для печати краткой детализации трафика
    --   - при ошибке выставляет исключение
    PROCEDURE kvitok_detail( 
                   p_recordset OUT t_refc, 
                   p_account_id IN INTEGER,      -- ID счета
                   p_period_id  IN INTEGER       -- ID отчетного периода
               );                       
      
END PK102_RECEIPT_FOR_PAYMENT;
/
CREATE OR REPLACE PACKAGE BODY PK102_RECEIPT_FOR_PAYMENT
IS

-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
-- Общая информация счет + данные продавца + данные клиента:
--   - при ошибке выставляет исключение
PROCEDURE kvitok_header( 
               p_recordset OUT t_refc, 
               p_account_id IN INTEGER,    -- ID лицевого счета            
               p_period_id  IN INTEGER     -- ID отчетного периода
           )
IS
    v_prcName    CONSTANT VARCHAR2(30) := 'kvitok_header';
    v_retcode    INTEGER;
BEGIN
    -- возвращаем курсор
    OPEN p_recordset FOR
        -- Общая информация счет + данные продавца + данные клиента:
         SELECT 
               AP.ACCOUNT_ID,                -- ID л/с клиента
               A.ACCOUNT_NO,                 -- № лицевого счета
               AP.CONTRACTOR_ID,             -- ID продавца
               CR.SHORT_NAME COMPANY_NAME,   -- Компания продавец
               CR.INN COMPANY_INN,           -- ИНН продавца
               CB.BANK_NAME,                 -- Банк
               CB.BANK_SETTLEMENT,           -- № Р/с 
               CB.BANK_CORR_ACCOUNT,         -- № К/с
               CB.BANK_CODE,                 -- БИК
               SUB.SUBSCRIBER_ID,            -- ID клиента
               SUB.LAST_NAME SUB_LAST_NAME,     -- Ф.И.О.
               SUB.FIRST_NAME SUB_FIRST_NAME,   -- Ф.И.О.
               SUB.MIDDLE_NAME SUB_MIDDLE_NAME, -- Ф.И.О.
               AC.COUNTRY      DLV_ADDR_COUNTRY,
               AC.ZIP          DLV_ADDR_ZIP,
               AC.STATE        DLV_ADDR_STATE,
               AC.CITY         DLV_ADDR_CITY,
               AC.ADDRESS      DLV_ADDR_ADDRESS,
               AC.PHONES CLIENT_PHONE,
               CRA.PHONE_BILLING,
               CRA.PHONE_ACCOUNT,                             
               P.PERIOD_FROM, 
               P.PERIOD_TO,               
               A.CURRENCY_ID                 -- ID валюты счета               
          FROM ACCOUNT_T A,
               ACCOUNT_PROFILE_T AP,
               CONTRACTOR_T CR,
               CONTRACTOR_BANK_T CB,
               CONTRACTOR_ADDRESS_T CRA,
               ACCOUNT_CONTACT_T AC,
               SUBSCRIBER_T SUB,
               PERIOD_T P
         WHERE P.PERIOD_ID = p_period_id
           AND A.ACCOUNT_ID = p_account_id
           AND A.ACCOUNT_TYPE = 'P'
           AND AP.ACCOUNT_ID = A.ACCOUNT_ID
           AND AC.ACCOUNT_ID = AP.ACCOUNT_ID
           AND AC.DATE_FROM <= P.PERIOD_TO
           AND SUB.SUBSCRIBER_ID = AP.SUBSCRIBER_ID
           AND (AC.DATE_TO IS NULL OR P.PERIOD_FROM < AC.DATE_TO )
           AND AC.ADDRESS_TYPE = 'DLV'
           AND AP.DATE_FROM <= P.PERIOD_TO 
           AND (AP.DATE_TO IS NULL OR P.PERIOD_FROM < AP.DATE_TO )
           AND CR.CONTRACTOR_ID = AP.CONTRACTOR_ID
           AND CRA.CONTRACTOR_ID = CR.CONTRACTOR_ID
           --AND CB.BANK_ID = AP.CONTRACTOR_BANK_ID
           AND CB.CONTRACTOR_ID = CR.CONTRACTOR_ID
           AND CB.DATE_FROM <= P.PERIOD_TO 
           AND (CB.DATE_TO IS NULL OR P.PERIOD_FROM < CB.DATE_TO )
         ;    
EXCEPTION
    WHEN OTHERS THEN
        v_retcode := Pk01_SysLog.Fn_write_Error('ERROR', c_PkgName||'.'||v_prcName);
        IF p_recordset%ISOPEN THEN 
            CLOSE p_recordset;
        END IF;
        RAISE_APPLICATION_ERROR(Pk01_SysLog.n_APP_EXCEPTION, 'msg_id='||v_retcode||':'||c_PkgName||'.'||v_prcName);
END;

-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
-- получить данные для печати: "Итоги за период"
-- позиции счета и ивойса сформированы, платежи разнесены, авансы сформированы, 
-- новый биллинговый период открыт
--   - при ошибке выставляет исключение
PROCEDURE kvitok_summ( 
               p_recordset OUT t_refc, 
               p_account_id IN INTEGER,    -- ID лицевого счета
               p_period_id  IN INTEGER     -- ID отчетного периода
           )
IS
    v_prcName         CONSTANT VARCHAR2(30) := 'kvitok_summ';
    v_balance         NUMBER; 
    v_open_balance    NUMBER;  -- входящий баланс на начало периода выставления счета
    v_close_balance   NUMBER;  -- выходяший баланс на конец периода выставления счета
    v_open_due        NUMBER;  -- задолженность за предыдущий период
    v_bill_total      NUMBER;  -- начислено за текущий период
    v_recvd           NUMBER;  -- принято платежей за период счета
    v_last_period_id  INTEGER;
    v_retcode         INTEGER;
    
    v_balance_ac         NUMBER; 
BEGIN
    -- получаем ID предыдущего периода
    v_last_period_id := PK04_PERIOD.Make_prev_id(p_period_id);

    -- получаем входящий баланс периода
    SELECT NVL(SUM(CLOSE_BALANCE),0) 
           into v_open_balance
           FROM (  
               SELECT *
                FROM REP_PERIOD_INFO_T
               WHERE rep_period_id <= v_last_period_id 
                AND account_id = p_account_id
        ORDER BY REP_PERIOD_ID DESC)
     WHERE ROWNUM = 1;
     
    -- получаем сумму начислений по счетам за период (кроме основного могут быть корректировки)
    SELECT NVL(SUM(B.TOTAL),0)
      INTO v_bill_total
      FROM BILL_T B
     WHERE B.ACCOUNT_ID = p_account_id
       AND B.REP_PERIOD_ID = p_period_id;
    -- сумма платежей в период, за который выставлен счет 
    SELECT NVL(SUM(P.RECVD),0)
      INTO v_recvd 
      FROM PAYMENT_T P
     WHERE P.ACCOUNT_ID = p_account_id
       AND P.REP_PERIOD_ID = p_period_id;
    

--- add 31.07.2014    
/*    if v_open_balance = 0 and v_bill_total = 0 and v_recvd = 0 then
    
     --   SELECT  AC.BALANCE into v_open_balance  
     --        FROM ACCOUNT_T ac      
     --       WHERE ACCOUNT_ID = p_account_id;
            
        SELECT case 
                   when NVL(SUM(CLOSE_BALANCE),0) < 0 then NVL(SUM(CLOSE_BALANCE),0)
                   else 0
               end 
            INTO v_open_balance
            FROM REP_PERIOD_INFO_T rt 
            WHERE ACCOUNT_ID = p_account_id AND REP_PERIOD_ID = 
                (SELECT max(REP_PERIOD_ID) 
                     FROM REP_PERIOD_INFO_T  
                     WHERE REP_PERIOD_ID < p_period_id
                     AND  ACCOUNT_ID = p_account_id) ;   
             
    end if;
*/    
--- add 31.07.2014       
       
    -- задолженность
    v_open_due := -(v_open_balance + v_recvd);

    -- выходящий баланс
    v_close_balance := v_open_balance + v_recvd - v_bill_total;
        
    -- возвращаем курсор
    OPEN p_recordset FOR
         SELECT 
              v_open_balance    OPEN_BALANCE,      -- аванс/долг (входящий баланс от предыдущего периода)
              v_recvd           RECVD,             -- принято платежей за период
              v_open_due        OPEN_DUE,          -- задолженность за предыдущий период
              v_bill_total      BILL_TOTAL,        -- начисления по счетам за период
              v_close_balance   CLOSE_BALANCE,     -- баланс в конце периода
              CASE WHEN v_close_balance < 0 THEN  
                   -v_close_balance ELSE 0 END PAY_SUMM  -- к оплате 
           FROM DUAL;
EXCEPTION
    WHEN OTHERS THEN
        v_retcode := Pk01_SysLog.Fn_write_Error('ERROR', c_PkgName||'.'||v_prcName);
        IF p_recordset%ISOPEN THEN 
            CLOSE p_recordset;
        END IF;
        RAISE_APPLICATION_ERROR(Pk01_SysLog.n_APP_EXCEPTION, 'msg_id='||v_retcode||':'||c_PkgName||'.'||v_prcName);
END;
 
-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
-- получить данные для печати позиций счета (начисления)
--   - при ошибке выставляет исключение
PROCEDURE kvitok_invoices( 
               p_recordset OUT t_refc, 
               p_account_id IN INTEGER,   -- ID лицевого счета
               p_period_id  IN INTEGER    -- ID отчетного периода
           )
IS
    v_prcName    CONSTANT VARCHAR2(30) := 'kvitok_invoices';
    v_retcode    INTEGER;
BEGIN
    -- возвращаем курсор
    OPEN p_recordset FOR
        SELECT DECODE(BILL_TYPE,2,'Корректировка. ') || SERVICE_NAME SERVICE_NAME,         
                 SUM (GROSS) GROSS,
                 SUM (TAX) TAX,
                 SUM (TOTAL) TOTAL
            FROM (SELECT S.SERVICE SERVICE_NAME,
                         II.GROSS,
                         II.TAX,
                         II.TOTAL,
                         DECODE (b.bill_type, 'B', 1, 2) BILL_TYPE
                    FROM BILL_T B, INVOICE_ITEM_T II, SERVICE_T S
                   WHERE     B.ACCOUNT_ID = p_account_id
                         AND B.REP_PERIOD_ID = p_period_id
                         AND B.BILL_STATUS != 'EMPTY' --PK00_CONST.c_BILL_STATE_EMPTY -- пустые не интересны
                         AND II.BILL_ID = B.BILL_ID
                         AND II.REP_PERIOD_ID = B.REP_PERIOD_ID
                         AND II.SERVICE_ID = S.SERVICE_ID)
        GROUP BY BILL_TYPE, SERVICE_NAME;
EXCEPTION
    WHEN OTHERS THEN
        v_retcode := Pk01_SysLog.Fn_write_Error('ERROR', c_PkgName||'.'||v_prcName);
        IF p_recordset%ISOPEN THEN 
            CLOSE p_recordset;
        END IF;
        RAISE_APPLICATION_ERROR(Pk01_SysLog.n_APP_EXCEPTION, 'msg_id='||v_retcode||':'||c_PkgName||'.'||v_prcName);
END;

-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
-- Получение позиций счета (item-ы)
    PROCEDURE kvitok_bill_items( 
         p_result        OUT VARCHAR2, 
         p_recordset     OUT t_refc, 
         p_account_id    IN NUMBER,     -- номер лицевого счета
         p_rep_period_id IN NUMBER      -- период счета         
    )
IS
    v_prcName            CONSTANT VARCHAR2(30) := 'kvitok_bill_items';
    v_retcode            INTEGER;
begin    
    open p_recordset for
         SELECT 
               b.bill_id,
               b.rep_period_id,
               b.bill_no,
               i.item_id,
               i.item_type item_type_id,
               dict_type.name item_type,
               i.charge_type charge_type_id,
               dict_charge_type.NAME charge_type,
               i.item_total,
               0 adjusted,
               NULL TRANSFERED,
               i.recvd,               
               i.date_from,
               i.date_to,
               i.item_status item_status_id,
               dict_status.name item_status,
               i.service_id,
               S.SERVICE SERVICE_NAME,
               S.SERVICE_CODE SERVICE_KEY,
               S.SERVICE_SHORT SERVICE_NAME_SHORT,
               S.ERP_PRODCODE SERVICE_ERP_CODE,
               i.subservice_id,               
               SS.SUBSERVICE SUBSERVICE_NAME,
               SS.SHORTNAME SUBSERVICE_NAME_SHORT,               
               SS.SUBSERVICE_KEY
          FROM 
               bill_t b,
               item_t i, 
               service_t s, 
               subservice_t ss,
               dictionary_t dict_type,
               dictionary_t dict_status,              
               dictionary_t dict_charge_type               
         WHERE b.bill_id = i.bill_id
               AND i.service_id = S.SERVICE_ID(+)
               AND i.subservice_id = SS.SUBSERVICE_ID(+)
               AND dict_charge_type.key (+)= i.CHARGE_TYPE
               AND dict_charge_type.PARENT_ID (+)= 7
               AND dict_type.key (+)= i.item_type
               AND DICT_TYPE.PARENT_ID (+)= 5
               AND dict_status.key (+)= i.item_status
               AND dict_status.PARENT_ID (+)= 6
--               AND b.bill_id = p_bill_id
               AND b.account_id = p_account_id
               AND b.rep_period_id = p_rep_period_id;  
exception
   WHEN OTHERS THEN
        v_retcode := Pk01_SysLog.Fn_write_Error('ERROR', c_PkgName||'.'||v_prcName);
        IF p_recordset%ISOPEN THEN 
            CLOSE p_recordset;
        END IF;
        RAISE_APPLICATION_ERROR(Pk01_SysLog.n_APP_EXCEPTION, 'msg_id='||v_retcode||':'||c_PkgName||'.'||v_prcName);
end; 

-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --
-- получить данные для печати краткой детализации трафика
--   - при ошибке выставляет исключение
PROCEDURE kvitok_detail( 
               p_recordset OUT t_refc, 
               p_account_id IN INTEGER,    -- ID лицевого счета
               p_period_id  IN INTEGER     -- ID отчетного периода
           )
IS
    v_prcName    CONSTANT VARCHAR2(30) := 'kvitok_detail';
    v_retcode    INTEGER;
BEGIN
    -- возвращаем курсор 
    OPEN p_recordset FOR        
          SELECT PREFIX_B,
               TERM_Z_NAME,                 
               CALL_DAY START_TIME,
               CALLS_COUNT,
               MINS_SUM,
               AMOUNT_SUM,
               SUBSERVICE_KEY
            FROM DETAIL_MMTS_T_FIZ
           WHERE rep_period_ID = p_period_id
                 AND account_id = p_account_id
        ORDER BY START_TIME, PREFIX_B;         
EXCEPTION
    WHEN OTHERS THEN
        v_retcode := Pk01_SysLog.Fn_write_Error('ERROR', c_PkgName||'.'||v_prcName);
        IF p_recordset%ISOPEN THEN 
            CLOSE p_recordset;
        END IF;
        RAISE_APPLICATION_ERROR(Pk01_SysLog.n_APP_EXCEPTION, 'msg_id='||v_retcode||':'||c_PkgName||'.'||v_prcName);
END;

END PK102_RECEIPT_FOR_PAYMENT;
/
